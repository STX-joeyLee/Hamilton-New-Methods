//****************************************************************************************************
//  
//   Library for Methods of Microlab® 2006 STARline Maintenance
//   Copyright © by HAMILTON Bonaduz AG, CH-7402 Bonaduz.
//   All rights reserved.
//
//   Method      : NanoDecontaminationMaintenance.hsl
//
//   Description : Method for Cleaning all filter
//
//   Revisions   : Rev 1.0 2006-04-25 Thomas Benz
//
//****************************************************************************************************
//
// Modification History
//
// 2008-06-19  Thomas Benz    :  - Library implemented
// 2009-01-14  Claudio Jörg   :  - Change report short name of used template and generated report:
//                                  - to ..MVmndc.. (previously named like ..MVmmtl..) for deconamination report
//                                  - to ..MVmnsu.. (previously named like ..MVmwkl..) for start uup report
//
//********************************************************************************************************************************




//---------------------------------------------------------------------------------
// #define HSL_RUNTIME 1 //testing errors in runtime
//---------------------------------------------------------------------------------

//device ML_STAR; //(local device in function startMaintenance) 

namespace DecontaminationNanoMaintenance
{
	// -----------------------------------------------------------------------------
	// Included libraries
	// -----------------------------------------------------------------------------
	#ifndef __HslStarLineMaintMetLib_hsl__
	#include "HslStarLineMaintMetLib.hs_"
	#endif

	#ifndef __HSLML_STARLib_hsl__ 
	#include "HSLML_STARLib.hsl"
	#endif

	#ifndef __HSLStrLib_hsl__
	#include "HSLStrLib.hsl"
	#endif

	#ifndef __HSLStringTableLib_hsl__
	#include "HSLStringTableLib.hs_" 
	#endif

	// -----------------------------------------------------------------------------
	// String Table
	// -----------------------------------------------------------------------------
	namespace IDS // String ID
	{
		static const variable first(1);

		static const variable dlgCannotRunWithSimulator(first + 1);
		static const variable dlgMaintenanceNoLabware(first + 2);

      // decontamination string IDs
		static const variable dlgNanoPipettorTitle(first + 10);
		static const variable dlgStatusSuccessfulText(first + 11);	
		static const variable dlgStatusIncompleteText(first + 12);
		static const variable dlgStatusFailedText(first + 13);
		static const variable dlgMaintenanceAbortText(first + 14);
		static const variable dlgCheckNanoPipettorText(first + 15);
		static const variable dlgNoNanopipettorFound(first + 16);

      // start up string IDs must be a delta of 30
		static const variable dlgNanoPipettorTitleSt(first + 40);
		static const variable dlgStatusSuccessfulTextSt(first + 41);	
		static const variable dlgStatusIncompleteTextSt(first + 42);
		static const variable dlgStatusFailedTextSt(first + 43);
		static const variable dlgMaintenanceAbortTextSt(first + 44);
		static const variable dlgCheckNanoPipettorTextSt(first + 45);
		static const variable dlgNoNanopipettorFoundSt(first + 46);

		static const variable last(first + 46);
	} // String Table

		
	// method directory
	static const variable methDir("VM\\");

	// report files
   static const variable templateFileName(methDir + "StarLineNanoDecontaminationMaintenance_Template_MVmndc");
   static const variable templateFileNameSUp(methDir + "StarLineNanoStartUpMaintenance_Template_MVmnsu");

	// layout files
	static const variable layoutFileName_Star(methDir + "StarLineMaintenance_Star");
	static const variable layoutFileName_Starlet(methDir + "StarLineMaintenance_Starlet");
	static const variable layoutFileName_StarPlus(methDir + "StarLineMaintenance_StarPlus");

   static variable strIDdelta(0);
   static variable maintenanceTitle;


	// -----------------------------------------------------------------------------
	function startMaintenance(variable& layoutName, variable& instrumentNr, variable nanoProcessID)
	// -----------------------------------------------------------------------------
	{ 
		variable NanoPipettor;
      string   tempService_carrier;
		device   ML_STAR( layoutName, "ML_STAR", hslTrue ); 
		
		onerror goto UnhandledError;

      if(nanoProcessID == PID::startUpMaintNano)
         strIDdelta = 30;

      maintenanceTitle = StringTable::Load(IDS::dlgNanoPipettorTitle + strIDdelta);

		// --------------------------------------------------------------------------

		// abort if no Nanopippettor found
		NanoPipettor = ML_STAR.GetCfgValueWithKey( MtcLib::MtConst::starCfgNanoPipettorKey );
      if (NanoPipettor == 0)
	   {
			MessageBox( StringTable::Load(IDS::dlgNoNanopipettorFound + strIDdelta),
            maintenanceTitle, hslOKOnly | hslError, hslInfinite );
			abort;
		}

		// abort method if simulator mode is set
		if(HSLML_STAR::IsSimulatorMode(ML_STAR))
		{
			MessageBox( StringTable::Load(IDS::dlgCannotRunWithSimulator),
            maintenanceTitle, hslOKOnly | hslExclamation, hslInfinite );
			abort;
		}

  		// --------------------------------------------------------------------------
      // check if an service carrier available on PC
		tempService_carrier = StrConcat2(MtcLib::GetLabwarePath(), MtcLib::LabwrData::nanoService_carrier); 	
		if ("" == SearchPath(tempService_carrier))
		{
			MessageBox( StringTable::Load(IDS::dlgMaintenanceNoLabware),
            maintenanceTitle, hslOKOnly | hslExclamation, hslInfinite );
			abort;
		}


		// --------------------------------------------------------------------------
		// Initialize maintenance, evaluate and check configuration data first		
		MtcLib::InitializeAndCheckConfiguration( ML_STAR, instrumentNr );
		 
		MtcLib::MoveRight(ML_STAR, instrumentNr);


		// --------------------------------------------------------------------------
		// Nano Pipettor check
		// --------------------------------------------------------------------------
		if ( hslYes  != MessageBox( 
		   StringTable::Load(IDS::dlgCheckNanoPipettorText + strIDdelta),
		   maintenanceTitle, hslYesNo	| hslInformation, hslInfinite ) )
		{
			return;
		}

      // --------------------------------------------------------------------------
      // Store data for daily maintenance process on instrument to failed
      MtcLib::StoreProcessDataOnInstrument( nanoProcessID, ML_STAR );

		// Yes -> maintenance process for nanopipettor start
		MtcLib::nanoPipettorMaintenance(ML_STAR, nanoProcessID);

		// ---------------------------------------------------------------------------
		// Daily maintenance successful, incomplete or failed 
		//----------------------------------------------------------------------------
		{
			variable state;
			 
			state = MtcLib::GetProcessStateNano();

			if(state == MPS::mpsSuccessful) 
			{
				MessageBox( StringTable::Load(IDS::dlgStatusSuccessfulText + strIDdelta),
               maintenanceTitle,	hslOKOnly | hslInformation, hslInfinite );
			}
			else
	  		if(state == MPS::mpsFailed) 
			{
				MessageBox( StringTable::Load(IDS::dlgStatusFailedText + strIDdelta),
               maintenanceTitle,	hslOKOnly | hslError, hslInfinite );
			}
			else
	  		if(state == MPS::mpsIncomplete) 
			{
				MessageBox( StringTable::Load(IDS::dlgStatusIncompleteText + strIDdelta),
               maintenanceTitle,	hslOKOnly | hslError, hslInfinite );
			}
 
		}

		// ---------------------------------------------------------------------------
		// Create report file.
		// ---------------------------------------------------------------------------
      if(nanoProcessID == PID::decontaminationMaintNano)
		{
			variable reportFileName("StarLineNanoDecontaminationMaintenance_%s_MVmndc.xls"); // %s ==> GUID

			StrReplace(reportFileName, "%s", GetUniqueRunId());
			MtcLib::CreateReportFileNano( templateFileName,	reportFileName, "DecontaminationNanoMaintenance"); // report excel area name 
		}
      if(nanoProcessID == PID::startUpMaintNano)
		{
			variable reportFileName("StarLineStartUpNanoMaintenance_%s_MVmnsu.xls"); // %s ==> GUID

			StrReplace(reportFileName, "%s", GetUniqueRunId());
			MtcLib::CreateReportFileNano( templateFileNameSUp,	reportFileName, "StartUpNanoMaintenance"); // report excel area name 
		}

		// ---------------------------------------------------------------------------
		// Store data for weekly maintenance Nanopipettor process on instrument
		// 
		MtcLib::StoreProcessDataOnInstrument( nanoProcessID, ML_STAR );
		return;
		
		// ---------------------------------------------------------------------------
		UnhandledError :
		{
         MessageBox( err.GetDescription(), maintenanceTitle, hslOKOnly | hslError, hslInfinite );
         err.Clear();
		}

	} // end startMaintenance

	function OnAbortNanoDecontaminationMaintenance()
	{
		// show dialog (power off /on)
		MessageBox( StringTable::Load(IDS::dlgMaintenanceAbortText + strIDdelta),
         maintenanceTitle, hslOKOnly | hslExclamation, hslInfinite );
	}

	//-----------------------------------------------------------------------------------------------------
	// Start method
	method main()
	//-----------------------------------------------------------------------------------------------------
	{
		variable instrumentNr;
		variable state;
      variable layoutFileName(layoutFileName_Star);
		static object fso;	   // file system object

		// Initialize string table
		StringTable::Init("HslStarLineNanoDecontaminationMaintMet");

		//StringTable::Dump(); 
		RegisterAbortHandler("OnAbortNanoDecontaminationMaintenance");

		instrumentNr = HSLML_STAR::GetInstrumentType();

		// Star
		if (instrumentNr == 0)
			layoutFileName = layoutFileName_Star;

		// Starlet
		if (instrumentNr == 1)
			layoutFileName = layoutFileName_Starlet;

		// StarPlus
		if (instrumentNr == 2)
         layoutFileName = layoutFileName_StarPlus;

		// check for customer defined maintenance layout
		fso.CreateObject("Scripting.FileSystemObject");
		if (fso.FileExists(GetMethodsPath() + "\\" + layoutFileName + "_mod.lay"))
			layoutFileName = layoutFileName + "_mod.lay";
		else 
			layoutFileName = layoutFileName + ".lay";
		fso.ReleaseObject();

		startMaintenance(layoutFileName, instrumentNr, PID::decontaminationMaintNano);

			 
		state = MtcLib::GetProcessStateNano();

		if(state == MPS::mpsSuccessful)
         // now start the start up routine
   		startMaintenance(layoutFileName, instrumentNr, PID::startUpMaintNano);

	}

} // namespace DecontaminationNanoMaintenance

// $$author=cjoerg$$valid=1$$time=2009-01-14 09:11$$checksum=46ba4fdc$$length=083$$